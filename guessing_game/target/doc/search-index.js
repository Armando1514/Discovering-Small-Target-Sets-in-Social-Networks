var N=null,E="",T="t",U="u",searchIndex={};
var R=["cfg_if","new128","split128","ppv_lite86","extract","insert","u128x1","u32x4x2","u64x2x2","u128x2","Generate only the basic implementations necessary to be…","ppv_lite86::x86_64","try_from","try_into","borrow_mut","result","type_id","borrow","typeid","instance","vec128_storage","vec256_storage","vec512_storage","default","RotateEachWord32","RotateEachWord64","UnsafeFrom","LaneWords4","MultiLane","StoreBytes","SseMachine","Avx2Machine","getrandom","formatter","nonzerou32","to_owned","clone_into","Machine","u32x4x4","u64x2x4","unpack","read_le","read_be","INTERNAL_START","Codes below this point represent OS Errors (i.e. positive…","CUSTOM_START","Codes at or above this point can be used by users to…","raw_os_error","Extract the raw OS error code (if this error came from the…","A wrapper type implementing [`RngCore`] for some type…","The core part of the RNG, implementing the `generate`…","Create a new `BlockRng` from an existing RNG implementing…","Get the index into the result buffer.","Reset the number of available results. This will force a…","generate_and_set","Generate a new set of results immediately, setting the…","rand_core","Implement `fill_bytes` by reading chunks from the output…","to_string","rand_core::block","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","seed_from_u64","from_rng","rngcore","blockrng","blockrng64","BlockRng","BlockRng64","BlockRngCore","SeedableRng","A cryptographically secure random number generator that…","get_word_pos","Get the offset from the start of the stream, in 32-bit…","set_word_pos","Set the offset from the start of the stream, in 32-bit…","set_stream","Set the stream number.","ChaCha with 20 rounds","chacha20core","chacha12core","chacha8core","generate","ChaCha20Rng","ChaCha12Rng","ChaCha8Rng","ChaCha12Core","ChaCha20Core","ChaCha8Core","A distribution to sample floating point numbers uniformly…","Sample values uniformly between two bounds.","new_inclusive","Create a new `Uniform` instance which samples uniformly…","uniform","rand::distributions","bernoulli","bernoullierror","WeightedIndex","A distribution using weighted sampling to pick a…","weightederror","rand::distributions::weighted","weightedindex","dirichlet","rand::rngs","rand::seq","choose_multiple","sample_iter","Fill `dest` entirely with random bytes (uniform value…","rand::distributions::uniform","into_iter","rand::distributions::weighted::alias_method","rand::rngs::adapter","rand::rngs::mock","rand::seq::index","sample_single","size_hint","threadrng","unitspheresurface","unitcircle","chisquared","lognormal","triangular","indexvecintoiter","indexvec","BernoulliError","SampleUniform","UniformSampler","SampleBorrow","Bernoulli","WeightedError","UnitSphereSurface","UnitCircle","ChiSquared","LogNormal","Dirichlet","Triangular","Distribution","ReseedingRng","EntropyRng","SliceRandom","IteratorRandom","AsByteSliceMut","Alphanumeric","OpenClosed01","StandardNormal","UniformInt","UniformFloat","UniformDuration","ThreadRng","ReadError","SliceChooseIter","IndexVecIter","IndexVecIntoIter","Error type of random number generators","A random number generator that retrieves randomness from…","Construct from any type supporting `std::error::Error`","Reference the inner error (`std` only)","take_inner","Unwrap the inner error (`std` only)","Retrieve the error code, if any.","The core of a random number generator.","Return the next random `u32`.","Return the next random `u64`.","Fill `dest` with random data.","Fill `dest` entirely with random data.","CryptoRng","A marker trait used to indicate that an [`RngCore`] or…","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types…","Create a new PRNG using the given seed.","Create a new PRNG using a `u64` seed.","Create a new PRNG seeded from another `Rng`.","from_entropy","Creates a new instance of the RNG seeded via [`getrandom`]."];
searchIndex["c2_chacha"]={"doc":"Pure Rust ChaCha with SIMD optimizations.","i":[[0,"guts","c2_chacha",E,N,N],[8,R[37],"c2_chacha::guts",E,N,N],[16,"u32x4",E,E,0,N],[16,"u64x2",E,E,0,N],[16,R[6],E,E,0,N],[16,R[7],E,E,0,N],[16,R[8],E,E,0,N],[16,"u64x4",E,E,0,N],[16,R[9],E,E,0,N],[16,R[38],E,E,0,N],[16,R[39],E,E,0,N],[16,"u128x4",E,E,0,N],[11,R[40],E,E,0,[[["s"]],["v"]]],[11,"vec",E,E,0,[[["a"]],["v"]]],[11,R[41],E,E,0,[[],["v"]]],[11,R[42],E,E,0,[[],["v"]]],[10,R[19],E,E,0,[[],["self"]]],[3,"ChaCha",E,E,N,N],[3,"State",E,E,N,N],[11,"new",E,E,1,[[],["self"]]],[11,"refill4",E,"Produce 4 blocks of output, advancing the state",1,[[["self"],["u32"]]]],[11,"refill",E,"Produce a block of output, advancing the state",1,[[["self"],["u32"]]]],[11,"set_stream_param",E,E,1,[[["self"],["u32"],["u64"]]]],[11,"get_stream_param",E,E,1,[[["self"],["u32"]],["u64"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[["self"],[T]]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"vzip",E,E,1,[[],["v"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[["self"],[T]]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"clone",E,E,1,[[["self"]],["chacha"]]],[11,"clone",E,E,2,[[["self"]],["state"]]]],"p":[[8,R[37]],[3,"ChaCha"],[3,"State"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","i":[[14,R[0],R[0],"The main macro provided by this crate. See crate…",N,N]],"p":[]};
searchIndex["getrandom"]={"doc":"Interface to the random number generator of the operating…","i":[[3,"Error",R[32],"A small and `no_std` compatible error type.",N,N],[5,R[32],E,"Fill `dest` with random bytes from the system's preferred…",N,[[],[[R[15],["error"]],["error"]]]],[18,"UNKNOWN",E,"Unknown error.",0,N],[18,"UNAVAILABLE",E,"System entropy source is unavailable.",0,N],[18,R[43],E,R[44],0,N],[18,R[45],E,R[46],0,N],[11,R[47],E,R[48],0,[[],[["option",["i32"]],["i32"]]]],[11,"code",E,"Extract the bare error code.",0,[[],[R[34]]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[36],E,E,0,[[["self"],[T]]]],[11,R[58],E,E,0,[[["self"]],["string"]]],[11,"fmt",E,E,0,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,0,[[["self"],[R[33]]],[R[15]]]],[11,"eq",E,E,0,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["error"]],["bool"]]],[11,"from",E,E,0,[[[R[34]]],["self"]]],[11,"from",E,E,0,[[["error"]],["self"]]],[11,"clone",E,E,0,[[["self"]],["error"]]]],"p":[[3,"Error"]]};
searchIndex["guessing_game"]={"doc":E,"i":[],"p":[]};
searchIndex["ppv_lite86"]={"doc":E,"i":[[0,"x86_64",R[3],E,N,N],[3,"YesS3",R[11],E,N,N],[3,"NoS3",E,E,N,N],[3,"YesS4",E,E,N,N],[3,"NoS4",E,E,N,N],[3,"YesA1",E,E,N,N],[3,"NoA1",E,E,N,N],[3,"YesA2",E,E,N,N],[3,"NoA2",E,E,N,N],[3,"YesNI",E,E,N,N],[3,"NoNI",E,E,N,N],[3,R[30],E,E,N,N],[3,R[31],E,E,N,N],[19,R[20],E,"Generic wrapper for unparameterized storage of any of the…",N,N],[19,R[21],E,E,N,N],[19,R[22],E,E,N,N],[6,"SSE2",E,E,N,N],[6,"SSSE3",E,E,N,N],[6,"SSE41",E,E,N,N],[6,"AVX",E,"AVX but not AVX2: only 128-bit integer operations, but use…",N,N],[6,"AVX2",E,E,N,N],[11,R[1],E,E,0,[[],["self"]]],[11,R[2],E,E,0,[[]]],[11,R[1],E,E,1,[[],["self"]]],[11,R[2],E,E,1,[[]]],[8,"AndNot",R[3],E,N,N],[16,"Output",E,E,2,N],[10,"andnot",E,E,2,[[]]],[8,"BSwap",E,E,N,N],[10,"bswap",E,E,3,[[],["self"]]],[8,"ArithOps",E,"Ops that depend on word size",N,N],[8,"BitOps0",E,"Ops that are independent of word size and endian",N,N],[8,"BitOps32",E,E,N,N],[8,"BitOps64",E,E,N,N],[8,"BitOps128",E,E,N,N],[8,R[24],E,E,N,N],[10,"rotate_each_word_right7",E,E,4,[[],["self"]]],[10,"rotate_each_word_right8",E,E,4,[[],["self"]]],[10,"rotate_each_word_right11",E,E,4,[[],["self"]]],[10,"rotate_each_word_right12",E,E,4,[[],["self"]]],[10,"rotate_each_word_right16",E,E,4,[[],["self"]]],[10,"rotate_each_word_right20",E,E,4,[[],["self"]]],[10,"rotate_each_word_right24",E,E,4,[[],["self"]]],[10,"rotate_each_word_right25",E,E,4,[[],["self"]]],[8,R[25],E,E,N,N],[10,"rotate_each_word_right32",E,E,5,[[],["self"]]],[8,"RotateEachWord128",E,E,N,N],[8,R[26],E,E,N,N],[10,"unsafe_from",E,E,6,[[[T]],["self"]]],[8,"Vec2",E,"A vector composed of two elements, which may be words or…",N,N],[10,R[4],E,E,7,[[["u32"]],["w"]]],[10,R[5],E,E,7,[[["w"],["u32"]],["self"]]],[8,"Vec4",E,"A vector composed of four elements, which may be words or…",N,N],[10,R[4],E,E,8,[[["u32"]],["w"]]],[10,R[5],E,E,8,[[["w"],["u32"]],["self"]]],[8,"Words4",E,"A vector composed of four words; depending on their size,…",N,N],[10,"shuffle1230",E,E,9,[[],["self"]]],[10,"shuffle2301",E,E,9,[[],["self"]]],[10,"shuffle3012",E,E,9,[[],["self"]]],[8,R[27],E,"A vector composed one or more lanes each composed of four…",N,N],[10,"shuffle_lane_words1230",E,E,10,[[],["self"]]],[10,"shuffle_lane_words2301",E,E,10,[[],["self"]]],[10,"shuffle_lane_words3012",E,E,10,[[],["self"]]],[8,"Swap64",E,"Exchange neigboring ranges of bits of the specified size",N,N],[10,"swap1",E,E,11,[[],["self"]]],[10,"swap2",E,E,11,[[],["self"]]],[10,"swap4",E,E,11,[[],["self"]]],[10,"swap8",E,E,11,[[],["self"]]],[10,"swap16",E,E,11,[[],["self"]]],[10,"swap32",E,E,11,[[],["self"]]],[10,"swap64",E,E,11,[[],["self"]]],[8,"u32x4",E,E,N,N],[8,"u64x2",E,E,N,N],[8,R[6],E,E,N,N],[8,R[7],E,E,N,N],[8,R[8],E,E,N,N],[8,"u64x4",E,E,N,N],[8,R[9],E,E,N,N],[8,R[38],E,E,N,N],[8,R[39],E,E,N,N],[8,"u128x4",E,E,N,N],[8,R[28],E,"A vector composed of multiple 128-bit lanes.",N,N],[10,"to_lanes",E,"Split a multi-lane vector into single-lane vectors.",12,[[],["lanes"]]],[10,"from_lanes",E,"Build a multi-lane vector from individual lanes.",12,[[["lanes"]],["self"]]],[8,"VZip",E,"Combine single vectors into a multi-lane vector.",N,N],[10,"vzip",E,E,13,[[],["v"]]],[8,R[37],E,E,N,N],[16,"u32x4",E,E,14,N],[16,"u64x2",E,E,14,N],[16,R[6],E,E,14,N],[16,R[7],E,E,14,N],[16,R[8],E,E,14,N],[16,"u64x4",E,E,14,N],[16,R[9],E,E,14,N],[16,R[38],E,E,14,N],[16,R[39],E,E,14,N],[16,"u128x4",E,E,14,N],[11,R[40],E,E,14,[[["s"]],["store"]]],[11,"vec",E,E,14,[[["a"]],["v"]]],[11,R[41],E,E,14,[[],["v"]]],[11,R[42],E,E,14,[[],["v"]]],[10,R[19],E,E,14,[[],["self"]]],[8,"Store",E,E,N,N],[10,R[40],E,E,15,[[["s"]],["self"]]],[8,R[29],E,E,N,N],[10,"unsafe_read_le",E,E,16,[[],["self"]]],[10,"unsafe_read_be",E,E,16,[[],["self"]]],[10,"write_le",E,E,16,[[]]],[10,"write_be",E,E,16,[[]]],[14,"dispatch",E,"Generate the full set of optimized implementations to take…",N,N],[14,"dispatch_light128",E,R[10],N,N],[14,"dispatch_light256",E,R[10],N,N],[11,R[12],R[11],E,17,[[[U]],[R[15]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[13],E,E,17,[[],[R[15]]]],[11,R[17],E,E,17,[[["self"]],[T]]],[11,R[14],E,E,17,[[["self"]],[T]]],[11,R[16],E,E,17,[[["self"]],[R[18]]]],[11,R[12],E,E,18,[[[U]],[R[15]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[13],E,E,18,[[],[R[15]]]],[11,R[17],E,E,18,[[["self"]],[T]]],[11,R[14],E,E,18,[[["self"]],[T]]],[11,R[16],E,E,18,[[["self"]],[R[18]]]],[11,R[12],E,E,19,[[[U]],[R[15]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[13],E,E,19,[[],[R[15]]]],[11,R[17],E,E,19,[[["self"]],[T]]],[11,R[14],E,E,19,[[["self"]],[T]]],[11,R[16],E,E,19,[[["self"]],[R[18]]]],[11,R[12],E,E,20,[[[U]],[R[15]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[13],E,E,20,[[],[R[15]]]],[11,R[17],E,E,20,[[["self"]],[T]]],[11,R[14],E,E,20,[[["self"]],[T]]],[11,R[16],E,E,20,[[["self"]],[R[18]]]],[11,R[12],E,E,21,[[[U]],[R[15]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[13],E,E,21,[[],[R[15]]]],[11,R[17],E,E,21,[[["self"]],[T]]],[11,R[14],E,E,21,[[["self"]],[T]]],[11,R[16],E,E,21,[[["self"]],[R[18]]]],[11,R[12],E,E,22,[[[U]],[R[15]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[13],E,E,22,[[],[R[15]]]],[11,R[17],E,E,22,[[["self"]],[T]]],[11,R[14],E,E,22,[[["self"]],[T]]],[11,R[16],E,E,22,[[["self"]],[R[18]]]],[11,R[12],E,E,23,[[[U]],[R[15]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[13],E,E,23,[[],[R[15]]]],[11,R[17],E,E,23,[[["self"]],[T]]],[11,R[14],E,E,23,[[["self"]],[T]]],[11,R[16],E,E,23,[[["self"]],[R[18]]]],[11,R[12],E,E,24,[[[U]],[R[15]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[13],E,E,24,[[],[R[15]]]],[11,R[17],E,E,24,[[["self"]],[T]]],[11,R[14],E,E,24,[[["self"]],[T]]],[11,R[16],E,E,24,[[["self"]],[R[18]]]],[11,R[12],E,E,25,[[[U]],[R[15]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[13],E,E,25,[[],[R[15]]]],[11,R[17],E,E,25,[[["self"]],[T]]],[11,R[14],E,E,25,[[["self"]],[T]]],[11,R[16],E,E,25,[[["self"]],[R[18]]]],[11,R[12],E,E,26,[[[U]],[R[15]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[13],E,E,26,[[],[R[15]]]],[11,R[17],E,E,26,[[["self"]],[T]]],[11,R[14],E,E,26,[[["self"]],[T]]],[11,R[16],E,E,26,[[["self"]],[R[18]]]],[11,R[12],E,E,27,[[[U]],[R[15]]]],[11,"into",E,E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[13],E,E,27,[[],[R[15]]]],[11,R[17],E,E,27,[[["self"]],[T]]],[11,R[14],E,E,27,[[["self"]],[T]]],[11,R[16],E,E,27,[[["self"]],[R[18]]]],[11,R[12],E,E,28,[[[U]],[R[15]]]],[11,"into",E,E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[13],E,E,28,[[],[R[15]]]],[11,R[17],E,E,28,[[["self"]],[T]]],[11,R[14],E,E,28,[[["self"]],[T]]],[11,R[16],E,E,28,[[["self"]],[R[18]]]],[11,R[12],E,E,29,[[[U]],[R[15]]]],[11,"into",E,E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[13],E,E,29,[[],[R[15]]]],[11,R[17],E,E,29,[[["self"]],[T]]],[11,R[14],E,E,29,[[["self"]],[T]]],[11,R[16],E,E,29,[[["self"]],[R[18]]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,R[19],E,E,27,[[],["self"]]],[11,R[19],E,E,28,[[],["self"]]],[11,R[40],E,E,29,[[[R[20]]],["self"]]],[11,"into",E,E,29,[[]]],[11,"into",E,E,29,[[]]],[11,"into",E,E,29,[[]]],[11,"into",E,E,0,[[]]],[11,"into",E,E,0,[[]]],[11,"into",E,E,0,[[]]],[11,"into",E,E,1,[[]]],[11,"into",E,E,1,[[]]],[11,"into",E,E,1,[[]]],[11,"clone",E,E,17,[[["self"]],["yess3"]]],[11,"clone",E,E,18,[[["self"]],["nos3"]]],[11,"clone",E,E,19,[[["self"]],["yess4"]]],[11,"clone",E,E,20,[[["self"]],["nos4"]]],[11,"clone",E,E,21,[[["self"]],["yesa1"]]],[11,"clone",E,E,22,[[["self"]],["noa1"]]],[11,"clone",E,E,23,[[["self"]],["yesa2"]]],[11,"clone",E,E,24,[[["self"]],["noa2"]]],[11,"clone",E,E,25,[[["self"]],["yesni"]]],[11,"clone",E,E,26,[[["self"]],["noni"]]],[11,"clone",E,E,27,[[["self"]],["ssemachine"]]],[11,"clone",E,E,28,[[["self"]],["avx2machine"]]],[11,"clone",E,E,29,[[["self"]],[R[20]]]],[11,"clone",E,E,0,[[["self"]],[R[21]]]],[11,"clone",E,E,1,[[["self"]],[R[22]]]],[11,R[23],E,E,29,[[],["self"]]],[11,R[23],E,E,0,[[],["self"]]],[11,R[23],E,E,1,[[],["self"]]],[11,R[40],R[3],E,14,[[["s"]],["store"]]],[11,"vec",E,E,14,[[["a"]],["v"]]],[11,R[41],E,E,14,[[],["v"]]],[11,R[42],E,E,14,[[],["v"]]]],"p":[[19,R[21]],[19,R[22]],[8,"AndNot"],[8,"BSwap"],[8,R[24]],[8,R[25]],[8,R[26]],[8,"Vec2"],[8,"Vec4"],[8,"Words4"],[8,R[27]],[8,"Swap64"],[8,R[28]],[8,"VZip"],[8,R[37]],[8,"Store"],[8,R[29]],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[3,R[30]],[3,R[31]],[19,R[20]]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","i":[[8,"RngCore","rand",R[163],N,N],[10,R[60],E,R[164],0,[[["self"]],["u32"]]],[10,R[61],E,R[165],0,[[["self"]],["u64"]]],[10,R[62],E,R[166],0,[[["self"]]]],[10,R[63],E,R[167],0,[[["self"]],[[R[15],["error"]],["error"]]]],[8,R[168],E,R[169],N,N],[8,R[73],E,R[170],N,N],[16,"Seed",E,R[171],1,N],[10,R[64],E,R[172],1,[[],["self"]]],[11,R[65],E,R[173],1,[[["u64"]],["self"]]],[11,R[66],E,R[174],1,[[["r"]],[[R[15],["error"]],["error"]]]],[11,R[175],E,R[176],1,[[],["self"]]],[3,"Error",E,R[156],N,N],[5,"thread_rng",E,"Retrieve the lazily-initialized thread-local random number…",N,[[],[R[119]]]],[5,"random",E,"Generates a random value using the thread-local random…",N,[[],[T]]],[0,"distributions",E,"Generating random samples from probability distributions",N,N],[3,R[145],R[97],"Sample a `char`, uniformly distributed over ASCII letters…",N,N],[3,"Uniform",E,R[93],N,N],[3,R[146],E,R[92],N,N],[3,"Open01",E,R[92],N,N],[3,R[131],E,"The Bernoulli distribution.",N,N],[3,R[133],E,"Samples uniformly from the surface of the unit sphere in…",N,N],[3,R[134],E,"Samples uniformly from the edge of the unit circle in two…",N,N],[3,"Gamma",E,"The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,R[135],E,"The chi-squared distribution `χ²(k)`, where `k` is the…",N,N],[3,"FisherF",E,"The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT",E,"The Student t distribution, `t(nu)`, where `nu` is the…",N,N],[3,"Beta",E,"The Beta distribution with shape parameters `alpha` and…",N,N],[3,"Normal",E,"The normal distribution `N(mean, std_dev**2)`.",N,N],[3,R[136],E,"The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,R[147],E,"Samples floating-point numbers according to the normal…",N,N],[3,"Exp",E,"The exponential distribution `Exp(lambda)`.",N,N],[3,"Exp1",E,"Samples floating-point numbers according to the…",N,N],[3,"Pareto",E,"Samples floating-point numbers according to the Pareto…",N,N],[3,"Poisson",E,"The Poisson distribution `Poisson(lambda)`.",N,N],[3,"Binomial",E,"The binomial distribution `Binomial(n, p)`.",N,N],[3,"Cauchy",E,"The Cauchy distribution `Cauchy(median, scale)`.",N,N],[3,R[137],E,"The dirichelet distribution `Dirichlet(alpha)`.",N,N],[3,R[138],E,"The triangular distribution.",N,N],[3,"Weibull",E,"Samples floating-point numbers according to the Weibull…",N,N],[3,"DistIter",E,"An iterator that generates random values of `T` with…",N,N],[3,"Standard",E,"A generic random value distribution, implemented for many…",N,N],[4,R[127],E,"Error type returned from `Bernoulli::new`.",N,N],[13,"InvalidProbability",E,"`p < 0` or `p > 1`.",2,N],[0,R[96],E,"A distribution uniformly sampling numbers within a given…",N,N],[3,"Uniform",R[111],R[93],N,N],[3,R[148],E,"The back-end implementing [`UniformSampler`] for integer…",N,N],[3,R[149],E,"The back-end implementing [`UniformSampler`] for…",N,N],[3,R[150],E,"The back-end implementing [`UniformSampler`] for `Duration`.",N,N],[8,R[128],E,"Helper trait for creating objects using the correct…",N,N],[16,"Sampler",E,"The `UniformSampler` implementation supporting type `X`.",3,N],[8,R[129],E,"Helper trait handling actual uniform sampling.",N,N],[16,"X",E,"The type sampled by this implementation.",4,N],[10,"new",E,"Construct self, with inclusive lower bound and exclusive…",4,[[["b2"],["b1"]],["self"]]],[10,R[94],E,"Construct self, with inclusive bounds `[low, high]`.",4,[[["b2"],["b1"]],["self"]]],[10,"sample",E,"Sample a value.",4,[[["self"],["r"]]]],[11,R[117],E,"Sample a single value uniformly from a range with…",4,[[["b2"],["b1"],["r"]]]],[8,R[130],E,"Helper trait similar to [`Borrow`] but implemented only…",N,N],[10,R[17],E,"Immutably borrows from an owned value. See…",5,[[["self"]],["borrowed"]]],[11,"new",E,R[95],6,[[["b2"],["b1"]],[R[96]]]],[11,R[94],E,R[95],6,[[["b2"],["b1"]],[R[96]]]],[11,"new",R[97],"Construct a new `Bernoulli` with the given probability of…",7,[[["f64"]],[[R[15],[R[98],R[99]]],[R[98]],[R[99]]]]],[11,"from_ratio",E,"Construct a new `Bernoulli` with the probability of…",7,[[["u32"]],[[R[15],[R[98],R[99]]],[R[98]],[R[99]]]]],[0,"weighted",E,"Weighted index sampling",N,N],[3,R[100],R[103],R[101],N,N],[4,R[132],E,"Error type returned from `WeightedIndex::new`.",N,N],[13,"NoItem",E,"The provided weight collection contains no items.",8,N],[13,"InvalidWeight",E,"A weight is either less than zero, greater than the…",8,N],[13,"AllWeightsZero",E,"All items in the provided weight collection are zero.",8,N],[13,"TooMany",E,"Too many weights are provided (length greater than…",8,N],[0,"alias_method",E,"This module contains an implementation of alias method for…",N,N],[3,R[100],R[113],R[101],N,N],[8,"Weight",E,"Trait that must be implemented for weights, that are used…",N,N],[18,"MAX",E,"Maximum number representable by `Self`.",9,N],[18,"ZERO",E,"Element of `Self` equivalent to 0.",9,N],[10,"try_from_u32_lossy",E,"Produce an instance of `Self` from a `u32` value, or…",9,[[["u32"]],["option"]]],[11,"sum",E,"Sums all values in slice `values`.",9,[[],["self"]]],[11,"new",E,"Creates a new [`WeightedIndex`].",10,[[["vec"]],[[R[15],[R[102]]],[R[102]]]]],[11,"new",R[103],"Creates a new a `WeightedIndex` [`Distribution`] using the…",11,[[["i"]],[[R[102]],[R[15],[R[104],R[102]]],[R[104]]]]],[11,"update_weights",E,"Update a subset of weights, without changing the number of…",11,[[["self"]],[[R[15],[R[102]]],[R[102]]]]],[11,"new",R[97],"Construct a new `UnitSphereSurface` distribution.",12,[[],[R[120]]]],[11,"new",E,"Construct a new `UnitCircle` distribution.",13,[[],[R[121]]]],[11,"new",E,"Construct an object representing the `Gamma(shape, scale)`…",14,[[["f64"]],["gamma"]]],[11,"new",E,"Create a new chi-squared distribution with…",15,[[["f64"]],[R[122]]]],[11,"new",E,"Create a new `FisherF` distribution, with the given…",16,[[["f64"]],["fisherf"]]],[11,"new",E,"Create a new Student t distribution with `n` degrees of…",17,[[["f64"]],["studentt"]]],[11,"new",E,"Construct an object representing the `Beta(alpha, beta)`…",18,[[["f64"]],["beta"]]],[11,"new",E,"Construct a new `Normal` distribution with the given mean…",19,[[["f64"]],["normal"]]],[11,"new",E,"Construct a new `LogNormal` distribution with the given…",20,[[["f64"]],[R[123]]]],[11,"new",E,"Construct a new `Exp` with the given shape parameter…",21,[[["f64"]],["exp"]]],[11,"new",E,"Construct a new Pareto distribution with given `scale` and…",22,[[["f64"]],["pareto"]]],[11,"new",E,"Construct a new `Poisson` with the given shape parameter…",23,[[["f64"]],["poisson"]]],[11,"new",E,"Construct a new `Binomial` with the given shape parameters…",24,[[["f64"],["u64"]],["binomial"]]],[11,"new",E,"Construct a new `Cauchy` with the given shape parameters…",25,[[["f64"]],["cauchy"]]],[11,"new",E,"Construct a new `Dirichlet` with the given alpha parameter…",26,[[["into",["vec"]],["vec",["f64"]]],[R[105]]]],[11,"new_with_param",E,"Construct a new `Dirichlet` with the given shape parameter…",26,[[["f64"],["usize"]],[R[105]]]],[11,"new",E,"Construct a new `Triangular` with minimum `min`, maximum…",27,[[["f64"]],[R[124]]]],[11,"new",E,"Construct a new `Weibull` distribution with given `scale`…",28,[[["f64"]],["weibull"]]],[8,R[139],E,"Types (distributions) that can be used to create a random…",N,N],[10,"sample",E,"Generate a random value of `T`, using `rng` as the source…",29,[[["self"],["r"]],[T]]],[11,R[109],E,"Create an iterator that generates random values of `T`,…",29,[[["r"]],["distiter"]]],[0,"prelude","rand","Convenience re-export of common members",N,N],[0,"rngs",E,"Random number generators and adapters",N,N],[3,"OsRng",R[106],R[157],N,N],[3,R[141],E,"An interface returning random data from external…",N,N],[3,"StdRng",E,"The standard RNG. The PRNG algorithm in `StdRng` is chosen…",N,N],[3,R[151],E,"The type returned by [`thread_rng`], essentially just a…",N,N],[0,"adapter",E,"Wrappers / adapters forming RNGs",N,N],[3,"ReadRng",R[114],"An RNG that reads random bytes straight from any type…",N,N],[3,R[152],E,"`ReadRng` error type",N,N],[3,R[140],E,"A wrapper around any PRNG that implements…",N,N],[11,"new",E,"Create a new `ReadRng` from a `Read`.",30,[[["r"]],["readrng"]]],[11,"new",E,"Create a new `ReseedingRng` from an existing PRNG,…",31,[[["rsdr"],["u64"],["r"]],["self"]]],[11,"reseed",E,"Reseed the internal PRNG.",31,[[["self"]],[[R[15],["error"]],["error"]]]],[11,"new",R[106],"Create a new `EntropyRng`.",32,[[],["self"]]],[0,"mock",E,"Mock random number generator",N,N],[3,"StepRng",R[115],"A simple implementation of `RngCore` for testing purposes.",N,N],[11,"new",E,"Create a `StepRng`, yielding an arithmetic sequence…",33,[[["u64"]],["self"]]],[0,"seq","rand","Sequence-related functionality",N,N],[3,R[153],R[107],"An iterator over multiple slice elements.",N,N],[0,"index",E,"Low-level API for sampling indices",N,N],[4,"IndexVec",R[116],"A vector of indices.",N,N],[4,R[154],E,"Return type of `IndexVec::iter`.",N,N],[4,R[155],E,"Return type of `IndexVec::into_iter`.",N,N],[5,"sample",E,"Randomly sample exactly `amount` distinct indices from…",N,[[["r"],["usize"]],[R[126]]]],[11,"len",E,"Returns the number of indices",34,[[["self"]],["usize"]]],[11,"is_empty",E,"Returns `true` if the length is 0.",34,[[["self"]],["bool"]]],[11,"index",E,"Return the value at the given `index`.",34,[[["self"],["usize"]],["usize"]]],[11,"into_vec",E,"Return result as a `Vec<usize>`. Conversion may or may not…",34,[[],[["vec",["usize"]],["usize"]]]],[11,"iter",E,"Iterate over the indices as a sequence of `usize` values",34,[[["self"]],["indexveciter"]]],[11,R[112],E,"Convert into an iterator over the indices as a sequence of…",34,[[],[R[125]]]],[8,R[142],R[107],"Extension trait on slices, providing random mutation and…",N,N],[16,"Item",E,"The element type.",35,N],[10,"choose",E,"Returns a reference to one random element of the slice, or…",35,[[["self"],["r"]],["option"]]],[10,"choose_mut",E,"Returns a mutable reference to one random element of the…",35,[[["self"],["r"]],["option"]]],[10,R[108],E,"Chooses `amount` elements from the slice at random,…",35,[[["self"],["r"],["usize"]],["slicechooseiter"]]],[10,"choose_weighted",E,"Similar to [`choose`], but where the likelihood of each…",35,[[["self"],["r"],["f"]],[[R[15],[R[102]]],[R[102]]]]],[10,"choose_weighted_mut",E,"Similar to [`choose_mut`], but where the likelihood of…",35,[[["self"],["r"],["f"]],[[R[15],[R[102]]],[R[102]]]]],[10,"shuffle",E,"Shuffle a mutable slice in place.",35,[[["self"],["r"]]]],[10,"partial_shuffle",E,"Shuffle a slice in place, but exit early.",35,[[["self"],["r"],["usize"]]]],[8,R[143],E,"Extension trait on iterators, providing random sampling…",N,N],[11,"choose",E,"Choose one element at random from the iterator.",36,[[["r"]],["option"]]],[11,"choose_multiple_fill",E,"Collects values at random from the iterator into a…",36,[[["r"]],["usize"]]],[11,R[108],E,"Collects `amount` values at random from the iterator into…",36,[[["r"],["usize"]],["vec"]]],[8,"Rng","rand","An automatically-implemented extension trait on…",N,N],[11,"gen",E,"Return a random value supporting the [`Standard`]…",37,[[["self"]],[T]]],[11,"gen_range",E,"Generate a random value in the range [`low`, `high`), i.e.…",37,[[["self"],["b1"],["b2"]],["sampleuniform"]]],[11,"sample",E,"Sample a new value, using the given distribution.",37,[[["self"],["distribution"]],[T]]],[11,R[109],E,"Create an iterator that generates values using the given…",37,[[["d"]],["distiter"]]],[11,"fill",E,R[110],37,[[["self"],[T]]]],[11,"try_fill",E,R[110],37,[[["self"],[T]],[[R[15],["error"]],["error"]]]],[11,"gen_bool",E,"Return a bool with a probability `p` of being true.",37,[[["self"],["f64"]],["bool"]]],[11,"gen_ratio",E,"Return a bool with a probability of…",37,[[["self"],["u32"]],["bool"]]],[8,R[144],E,"Trait for casting types to byte slices",N,N],[10,"as_byte_slice_mut",E,"Return a mutable reference to self as a byte slice",38,[[["self"]]]],[10,"to_le",E,"Call `to_le` on each element (i.e. byte-swap on Big Endian…",38,[[["self"]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,"into",E,E,39,[[],[U]]],[11,R[58],E,E,39,[[["self"]],["string"]]],[11,R[12],E,E,39,[[[U]],[R[15]]]],[11,R[13],E,E,39,[[],[R[15]]]],[11,R[17],E,E,39,[[["self"]],[T]]],[11,R[14],E,E,39,[[["self"]],[T]]],[11,R[16],E,E,39,[[["self"]],[R[18]]]],[11,"vzip",E,E,39,[[],["v"]]],[11,"from",R[97],E,40,[[[T]],[T]]],[11,"into",E,E,40,[[],[U]]],[11,R[12],E,E,40,[[[U]],[R[15]]]],[11,R[13],E,E,40,[[],[R[15]]]],[11,R[17],E,E,40,[[["self"]],[T]]],[11,R[14],E,E,40,[[["self"]],[T]]],[11,R[16],E,E,40,[[["self"]],[R[18]]]],[11,"vzip",E,E,40,[[],["v"]]],[11,"from",R[111],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[35],E,E,6,[[["self"]],[T]]],[11,R[36],E,E,6,[[["self"],[T]]]],[11,R[12],E,E,6,[[[U]],[R[15]]]],[11,R[13],E,E,6,[[],[R[15]]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[18]]]],[11,"vzip",E,E,6,[[],["v"]]],[11,"from",R[97],E,41,[[[T]],[T]]],[11,"into",E,E,41,[[],[U]]],[11,R[35],E,E,41,[[["self"]],[T]]],[11,R[36],E,E,41,[[["self"],[T]]]],[11,R[12],E,E,41,[[[U]],[R[15]]]],[11,R[13],E,E,41,[[],[R[15]]]],[11,R[17],E,E,41,[[["self"]],[T]]],[11,R[14],E,E,41,[[["self"]],[T]]],[11,R[16],E,E,41,[[["self"]],[R[18]]]],[11,"vzip",E,E,41,[[],["v"]]],[11,"from",E,E,42,[[[T]],[T]]],[11,"into",E,E,42,[[],[U]]],[11,R[35],E,E,42,[[["self"]],[T]]],[11,R[36],E,E,42,[[["self"],[T]]]],[11,R[12],E,E,42,[[[U]],[R[15]]]],[11,R[13],E,E,42,[[],[R[15]]]],[11,R[17],E,E,42,[[["self"]],[T]]],[11,R[14],E,E,42,[[["self"]],[T]]],[11,R[16],E,E,42,[[["self"]],[R[18]]]],[11,"vzip",E,E,42,[[],["v"]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[35],E,E,7,[[["self"]],[T]]],[11,R[36],E,E,7,[[["self"],[T]]]],[11,R[12],E,E,7,[[[U]],[R[15]]]],[11,R[13],E,E,7,[[],[R[15]]]],[11,R[17],E,E,7,[[["self"]],[T]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[["self"]],[R[18]]]],[11,"vzip",E,E,7,[[],["v"]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[35],E,E,12,[[["self"]],[T]]],[11,R[36],E,E,12,[[["self"],[T]]]],[11,R[12],E,E,12,[[[U]],[R[15]]]],[11,R[13],E,E,12,[[],[R[15]]]],[11,R[17],E,E,12,[[["self"]],[T]]],[11,R[14],E,E,12,[[["self"]],[T]]],[11,R[16],E,E,12,[[["self"]],[R[18]]]],[11,"vzip",E,E,12,[[],["v"]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[35],E,E,13,[[["self"]],[T]]],[11,R[36],E,E,13,[[["self"],[T]]]],[11,R[12],E,E,13,[[[U]],[R[15]]]],[11,R[13],E,E,13,[[],[R[15]]]],[11,R[17],E,E,13,[[["self"]],[T]]],[11,R[14],E,E,13,[[["self"]],[T]]],[11,R[16],E,E,13,[[["self"]],[R[18]]]],[11,"vzip",E,E,13,[[],["v"]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[35],E,E,14,[[["self"]],[T]]],[11,R[36],E,E,14,[[["self"],[T]]]],[11,R[12],E,E,14,[[[U]],[R[15]]]],[11,R[13],E,E,14,[[],[R[15]]]],[11,R[17],E,E,14,[[["self"]],[T]]],[11,R[14],E,E,14,[[["self"]],[T]]],[11,R[16],E,E,14,[[["self"]],[R[18]]]],[11,"vzip",E,E,14,[[],["v"]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[35],E,E,15,[[["self"]],[T]]],[11,R[36],E,E,15,[[["self"],[T]]]],[11,R[12],E,E,15,[[[U]],[R[15]]]],[11,R[13],E,E,15,[[],[R[15]]]],[11,R[17],E,E,15,[[["self"]],[T]]],[11,R[14],E,E,15,[[["self"]],[T]]],[11,R[16],E,E,15,[[["self"]],[R[18]]]],[11,"vzip",E,E,15,[[],["v"]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[35],E,E,16,[[["self"]],[T]]],[11,R[36],E,E,16,[[["self"],[T]]]],[11,R[12],E,E,16,[[[U]],[R[15]]]],[11,R[13],E,E,16,[[],[R[15]]]],[11,R[17],E,E,16,[[["self"]],[T]]],[11,R[14],E,E,16,[[["self"]],[T]]],[11,R[16],E,E,16,[[["self"]],[R[18]]]],[11,"vzip",E,E,16,[[],["v"]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[35],E,E,17,[[["self"]],[T]]],[11,R[36],E,E,17,[[["self"],[T]]]],[11,R[12],E,E,17,[[[U]],[R[15]]]],[11,R[13],E,E,17,[[],[R[15]]]],[11,R[17],E,E,17,[[["self"]],[T]]],[11,R[14],E,E,17,[[["self"]],[T]]],[11,R[16],E,E,17,[[["self"]],[R[18]]]],[11,"vzip",E,E,17,[[],["v"]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[35],E,E,18,[[["self"]],[T]]],[11,R[36],E,E,18,[[["self"],[T]]]],[11,R[12],E,E,18,[[[U]],[R[15]]]],[11,R[13],E,E,18,[[],[R[15]]]],[11,R[17],E,E,18,[[["self"]],[T]]],[11,R[14],E,E,18,[[["self"]],[T]]],[11,R[16],E,E,18,[[["self"]],[R[18]]]],[11,"vzip",E,E,18,[[],["v"]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[35],E,E,19,[[["self"]],[T]]],[11,R[36],E,E,19,[[["self"],[T]]]],[11,R[12],E,E,19,[[[U]],[R[15]]]],[11,R[13],E,E,19,[[],[R[15]]]],[11,R[17],E,E,19,[[["self"]],[T]]],[11,R[14],E,E,19,[[["self"]],[T]]],[11,R[16],E,E,19,[[["self"]],[R[18]]]],[11,"vzip",E,E,19,[[],["v"]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[35],E,E,20,[[["self"]],[T]]],[11,R[36],E,E,20,[[["self"],[T]]]],[11,R[12],E,E,20,[[[U]],[R[15]]]],[11,R[13],E,E,20,[[],[R[15]]]],[11,R[17],E,E,20,[[["self"]],[T]]],[11,R[14],E,E,20,[[["self"]],[T]]],[11,R[16],E,E,20,[[["self"]],[R[18]]]],[11,"vzip",E,E,20,[[],["v"]]],[11,"from",E,E,43,[[[T]],[T]]],[11,"into",E,E,43,[[],[U]]],[11,R[35],E,E,43,[[["self"]],[T]]],[11,R[36],E,E,43,[[["self"],[T]]]],[11,R[12],E,E,43,[[[U]],[R[15]]]],[11,R[13],E,E,43,[[],[R[15]]]],[11,R[17],E,E,43,[[["self"]],[T]]],[11,R[14],E,E,43,[[["self"]],[T]]],[11,R[16],E,E,43,[[["self"]],[R[18]]]],[11,"vzip",E,E,43,[[],["v"]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[35],E,E,21,[[["self"]],[T]]],[11,R[36],E,E,21,[[["self"],[T]]]],[11,R[12],E,E,21,[[[U]],[R[15]]]],[11,R[13],E,E,21,[[],[R[15]]]],[11,R[17],E,E,21,[[["self"]],[T]]],[11,R[14],E,E,21,[[["self"]],[T]]],[11,R[16],E,E,21,[[["self"]],[R[18]]]],[11,"vzip",E,E,21,[[],["v"]]],[11,"from",E,E,44,[[[T]],[T]]],[11,"into",E,E,44,[[],[U]]],[11,R[35],E,E,44,[[["self"]],[T]]],[11,R[36],E,E,44,[[["self"],[T]]]],[11,R[12],E,E,44,[[[U]],[R[15]]]],[11,R[13],E,E,44,[[],[R[15]]]],[11,R[17],E,E,44,[[["self"]],[T]]],[11,R[14],E,E,44,[[["self"]],[T]]],[11,R[16],E,E,44,[[["self"]],[R[18]]]],[11,"vzip",E,E,44,[[],["v"]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[35],E,E,22,[[["self"]],[T]]],[11,R[36],E,E,22,[[["self"],[T]]]],[11,R[12],E,E,22,[[[U]],[R[15]]]],[11,R[13],E,E,22,[[],[R[15]]]],[11,R[17],E,E,22,[[["self"]],[T]]],[11,R[14],E,E,22,[[["self"]],[T]]],[11,R[16],E,E,22,[[["self"]],[R[18]]]],[11,"vzip",E,E,22,[[],["v"]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[35],E,E,23,[[["self"]],[T]]],[11,R[36],E,E,23,[[["self"],[T]]]],[11,R[12],E,E,23,[[[U]],[R[15]]]],[11,R[13],E,E,23,[[],[R[15]]]],[11,R[17],E,E,23,[[["self"]],[T]]],[11,R[14],E,E,23,[[["self"]],[T]]],[11,R[16],E,E,23,[[["self"]],[R[18]]]],[11,"vzip",E,E,23,[[],["v"]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[],[U]]],[11,R[35],E,E,24,[[["self"]],[T]]],[11,R[36],E,E,24,[[["self"],[T]]]],[11,R[12],E,E,24,[[[U]],[R[15]]]],[11,R[13],E,E,24,[[],[R[15]]]],[11,R[17],E,E,24,[[["self"]],[T]]],[11,R[14],E,E,24,[[["self"]],[T]]],[11,R[16],E,E,24,[[["self"]],[R[18]]]],[11,"vzip",E,E,24,[[],["v"]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[],[U]]],[11,R[35],E,E,25,[[["self"]],[T]]],[11,R[36],E,E,25,[[["self"],[T]]]],[11,R[12],E,E,25,[[[U]],[R[15]]]],[11,R[13],E,E,25,[[],[R[15]]]],[11,R[17],E,E,25,[[["self"]],[T]]],[11,R[14],E,E,25,[[["self"]],[T]]],[11,R[16],E,E,25,[[["self"]],[R[18]]]],[11,"vzip",E,E,25,[[],["v"]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[],[U]]],[11,R[35],E,E,26,[[["self"]],[T]]],[11,R[36],E,E,26,[[["self"],[T]]]],[11,R[12],E,E,26,[[[U]],[R[15]]]],[11,R[13],E,E,26,[[],[R[15]]]],[11,R[17],E,E,26,[[["self"]],[T]]],[11,R[14],E,E,26,[[["self"]],[T]]],[11,R[16],E,E,26,[[["self"]],[R[18]]]],[11,"vzip",E,E,26,[[],["v"]]],[11,"from",E,E,27,[[[T]],[T]]],[11,"into",E,E,27,[[],[U]]],[11,R[35],E,E,27,[[["self"]],[T]]],[11,R[36],E,E,27,[[["self"],[T]]]],[11,R[12],E,E,27,[[[U]],[R[15]]]],[11,R[13],E,E,27,[[],[R[15]]]],[11,R[17],E,E,27,[[["self"]],[T]]],[11,R[14],E,E,27,[[["self"]],[T]]],[11,R[16],E,E,27,[[["self"]],[R[18]]]],[11,"vzip",E,E,27,[[],["v"]]],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[],[U]]],[11,R[35],E,E,28,[[["self"]],[T]]],[11,R[36],E,E,28,[[["self"],[T]]]],[11,R[12],E,E,28,[[[U]],[R[15]]]],[11,R[13],E,E,28,[[],[R[15]]]],[11,R[17],E,E,28,[[["self"]],[T]]],[11,R[14],E,E,28,[[["self"]],[T]]],[11,R[16],E,E,28,[[["self"]],[R[18]]]],[11,"vzip",E,E,28,[[],["v"]]],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[],[U]]],[11,R[112],E,E,45,[[],["i"]]],[11,R[12],E,E,45,[[[U]],[R[15]]]],[11,R[13],E,E,45,[[],[R[15]]]],[11,R[17],E,E,45,[[["self"]],[T]]],[11,R[14],E,E,45,[[["self"]],[T]]],[11,R[16],E,E,45,[[["self"]],[R[18]]]],[11,"vzip",E,E,45,[[],["v"]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[],[U]]],[11,R[35],E,E,46,[[["self"]],[T]]],[11,R[36],E,E,46,[[["self"],[T]]]],[11,R[12],E,E,46,[[[U]],[R[15]]]],[11,R[13],E,E,46,[[],[R[15]]]],[11,R[17],E,E,46,[[["self"]],[T]]],[11,R[14],E,E,46,[[["self"]],[T]]],[11,R[16],E,E,46,[[["self"]],[R[18]]]],[11,"vzip",E,E,46,[[],["v"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[["self"],[T]]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"from",R[111],E,47,[[[T]],[T]]],[11,"into",E,E,47,[[],[U]]],[11,R[35],E,E,47,[[["self"]],[T]]],[11,R[36],E,E,47,[[["self"],[T]]]],[11,R[12],E,E,47,[[[U]],[R[15]]]],[11,R[13],E,E,47,[[],[R[15]]]],[11,R[17],E,E,47,[[["self"]],[T]]],[11,R[14],E,E,47,[[["self"]],[T]]],[11,R[16],E,E,47,[[["self"]],[R[18]]]],[11,"vzip",E,E,47,[[],["v"]]],[11,"from",E,E,48,[[[T]],[T]]],[11,"into",E,E,48,[[],[U]]],[11,R[35],E,E,48,[[["self"]],[T]]],[11,R[36],E,E,48,[[["self"],[T]]]],[11,R[12],E,E,48,[[[U]],[R[15]]]],[11,R[13],E,E,48,[[],[R[15]]]],[11,R[17],E,E,48,[[["self"]],[T]]],[11,R[14],E,E,48,[[["self"]],[T]]],[11,R[16],E,E,48,[[["self"]],[R[18]]]],[11,"vzip",E,E,48,[[],["v"]]],[11,"from",E,E,49,[[[T]],[T]]],[11,"into",E,E,49,[[],[U]]],[11,R[35],E,E,49,[[["self"]],[T]]],[11,R[36],E,E,49,[[["self"],[T]]]],[11,R[12],E,E,49,[[[U]],[R[15]]]],[11,R[13],E,E,49,[[],[R[15]]]],[11,R[17],E,E,49,[[["self"]],[T]]],[11,R[14],E,E,49,[[["self"]],[T]]],[11,R[16],E,E,49,[[["self"]],[R[18]]]],[11,"vzip",E,E,49,[[],["v"]]],[11,"from",R[103],E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[35],E,E,11,[[["self"]],[T]]],[11,R[36],E,E,11,[[["self"],[T]]]],[11,R[12],E,E,11,[[[U]],[R[15]]]],[11,R[13],E,E,11,[[],[R[15]]]],[11,R[17],E,E,11,[[["self"]],[T]]],[11,R[14],E,E,11,[[["self"]],[T]]],[11,R[16],E,E,11,[[["self"]],[R[18]]]],[11,"vzip",E,E,11,[[],["v"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[35],E,E,8,[[["self"]],[T]]],[11,R[36],E,E,8,[[["self"],[T]]]],[11,R[58],E,E,8,[[["self"]],["string"]]],[11,R[12],E,E,8,[[[U]],[R[15]]]],[11,R[13],E,E,8,[[],[R[15]]]],[11,R[17],E,E,8,[[["self"]],[T]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"]],[R[18]]]],[11,"vzip",E,E,8,[[],["v"]]],[11,"from",R[113],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[35],E,E,10,[[["self"]],[T]]],[11,R[36],E,E,10,[[["self"],[T]]]],[11,R[12],E,E,10,[[[U]],[R[15]]]],[11,R[13],E,E,10,[[],[R[15]]]],[11,R[17],E,E,10,[[["self"]],[T]]],[11,R[14],E,E,10,[[["self"]],[T]]],[11,R[16],E,E,10,[[["self"]],[R[18]]]],[11,"vzip",E,E,10,[[],["v"]]],[11,"from",R[106],E,50,[[[T]],[T]]],[11,"into",E,E,50,[[],[U]]],[11,R[35],E,E,50,[[["self"]],[T]]],[11,R[36],E,E,50,[[["self"],[T]]]],[11,R[12],E,E,50,[[[U]],[R[15]]]],[11,R[13],E,E,50,[[],[R[15]]]],[11,R[17],E,E,50,[[["self"]],[T]]],[11,R[14],E,E,50,[[["self"]],[T]]],[11,R[16],E,E,50,[[["self"]],[R[18]]]],[11,"vzip",E,E,50,[[],["v"]]],[11,"from",E,E,32,[[[T]],[T]]],[11,"into",E,E,32,[[],[U]]],[11,R[12],E,E,32,[[[U]],[R[15]]]],[11,R[13],E,E,32,[[],[R[15]]]],[11,R[17],E,E,32,[[["self"]],[T]]],[11,R[14],E,E,32,[[["self"]],[T]]],[11,R[16],E,E,32,[[["self"]],[R[18]]]],[11,"vzip",E,E,32,[[],["v"]]],[11,"from",E,E,51,[[[T]],[T]]],[11,"into",E,E,51,[[],[U]]],[11,R[35],E,E,51,[[["self"]],[T]]],[11,R[36],E,E,51,[[["self"],[T]]]],[11,R[12],E,E,51,[[[U]],[R[15]]]],[11,R[13],E,E,51,[[],[R[15]]]],[11,R[17],E,E,51,[[["self"]],[T]]],[11,R[14],E,E,51,[[["self"]],[T]]],[11,R[16],E,E,51,[[["self"]],[R[18]]]],[11,"vzip",E,E,51,[[],["v"]]],[11,"from",E,E,52,[[[T]],[T]]],[11,"into",E,E,52,[[],[U]]],[11,R[35],E,E,52,[[["self"]],[T]]],[11,R[36],E,E,52,[[["self"],[T]]]],[11,R[12],E,E,52,[[[U]],[R[15]]]],[11,R[13],E,E,52,[[],[R[15]]]],[11,R[17],E,E,52,[[["self"]],[T]]],[11,R[14],E,E,52,[[["self"]],[T]]],[11,R[16],E,E,52,[[["self"]],[R[18]]]],[11,"vzip",E,E,52,[[],["v"]]],[11,"from",R[114],E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[12],E,E,30,[[[U]],[R[15]]]],[11,R[13],E,E,30,[[],[R[15]]]],[11,R[17],E,E,30,[[["self"]],[T]]],[11,R[14],E,E,30,[[["self"]],[T]]],[11,R[16],E,E,30,[[["self"]],[R[18]]]],[11,"vzip",E,E,30,[[],["v"]]],[11,"from",E,E,53,[[[T]],[T]]],[11,"into",E,E,53,[[],[U]]],[11,R[58],E,E,53,[[["self"]],["string"]]],[11,R[12],E,E,53,[[[U]],[R[15]]]],[11,R[13],E,E,53,[[],[R[15]]]],[11,R[17],E,E,53,[[["self"]],[T]]],[11,R[14],E,E,53,[[["self"]],[T]]],[11,R[16],E,E,53,[[["self"]],[R[18]]]],[11,"vzip",E,E,53,[[],["v"]]],[11,"from",E,E,31,[[[T]],[T]]],[11,"into",E,E,31,[[],[U]]],[11,R[35],E,E,31,[[["self"]],[T]]],[11,R[36],E,E,31,[[["self"],[T]]]],[11,R[12],E,E,31,[[[U]],[R[15]]]],[11,R[13],E,E,31,[[],[R[15]]]],[11,R[17],E,E,31,[[["self"]],[T]]],[11,R[14],E,E,31,[[["self"]],[T]]],[11,R[16],E,E,31,[[["self"]],[R[18]]]],[11,"vzip",E,E,31,[[],["v"]]],[11,"from",R[115],E,33,[[[T]],[T]]],[11,"into",E,E,33,[[],[U]]],[11,R[35],E,E,33,[[["self"]],[T]]],[11,R[36],E,E,33,[[["self"],[T]]]],[11,R[12],E,E,33,[[[U]],[R[15]]]],[11,R[13],E,E,33,[[],[R[15]]]],[11,R[17],E,E,33,[[["self"]],[T]]],[11,R[14],E,E,33,[[["self"]],[T]]],[11,R[16],E,E,33,[[["self"]],[R[18]]]],[11,"vzip",E,E,33,[[],["v"]]],[11,"from",R[107],E,54,[[[T]],[T]]],[11,"into",E,E,54,[[],[U]]],[11,R[112],E,E,54,[[],["i"]]],[11,R[12],E,E,54,[[[U]],[R[15]]]],[11,R[13],E,E,54,[[],[R[15]]]],[11,R[17],E,E,54,[[["self"]],[T]]],[11,R[14],E,E,54,[[["self"]],[T]]],[11,R[16],E,E,54,[[["self"]],[R[18]]]],[11,"vzip",E,E,54,[[],["v"]]],[11,"from",R[116],E,34,[[[T]],[T]]],[11,"into",E,E,34,[[],[U]]],[11,R[35],E,E,34,[[["self"]],[T]]],[11,R[36],E,E,34,[[["self"],[T]]]],[11,R[12],E,E,34,[[[U]],[R[15]]]],[11,R[13],E,E,34,[[],[R[15]]]],[11,R[17],E,E,34,[[["self"]],[T]]],[11,R[14],E,E,34,[[["self"]],[T]]],[11,R[16],E,E,34,[[["self"]],[R[18]]]],[11,"vzip",E,E,34,[[],["v"]]],[11,"from",E,E,55,[[[T]],[T]]],[11,"into",E,E,55,[[],[U]]],[11,R[112],E,E,55,[[],["i"]]],[11,R[12],E,E,55,[[[U]],[R[15]]]],[11,R[13],E,E,55,[[],[R[15]]]],[11,R[17],E,E,55,[[["self"]],[T]]],[11,R[14],E,E,55,[[["self"]],[T]]],[11,R[16],E,E,55,[[["self"]],[R[18]]]],[11,"vzip",E,E,55,[[],["v"]]],[11,"from",E,E,56,[[[T]],[T]]],[11,"into",E,E,56,[[],[U]]],[11,R[112],E,E,56,[[],["i"]]],[11,R[35],E,E,56,[[["self"]],[T]]],[11,R[36],E,E,56,[[["self"],[T]]]],[11,R[12],E,E,56,[[[U]],[R[15]]]],[11,R[13],E,E,56,[[],[R[15]]]],[11,R[17],E,E,56,[[["self"]],[T]]],[11,R[14],E,E,56,[[["self"]],[T]]],[11,R[16],E,E,56,[[["self"]],[R[18]]]],[11,"vzip",E,E,56,[[],["v"]]],[11,"clone",R[106],E,50,[[["self"]],["osrng"]]],[11,"source","rand",E,39,[[["self"]],[["option",["error"]],["error"]]]],[11,"from",E,E,39,[[["error"]],["error"]]],[11,"from",E,E,39,[[[R[34]]],["error"]]],[11,"read",E,E,0,[[["self"]],[["error"],[R[15],["usize","error"]],["usize"]]]],[11,R[23],R[106],E,50,[[],["osrng"]]],[11,"fmt",E,E,50,[[["self"],[R[33]]],[["error"],[R[15],["error"]]]]],[11,"fmt","rand",E,39,[[["self"],[R[33]]],[["error"],[R[15],["error"]]]]],[11,"fmt",E,E,39,[[["self"],[R[33]]],[["error"],[R[15],["error"]]]]],[11,R[60],R[106],E,50,[[["self"]],["u32"]]],[11,R[61],E,E,50,[[["self"]],["u64"]]],[11,R[62],E,E,50,[[["self"]]]],[11,R[63],E,E,50,[[["self"]],[[R[15],["error"]],["error"]]]],[11,"new",R[111],E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,47,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,47,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,R[117],E,E,47,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[117],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[117],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,49,[[["b2"],["b1"]],["self"]]],[11,R[94],E,E,49,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,49,[[["self"],["r"]],["duration"]]],[11,"sample",E,E,6,[[["self"],["r"]],["x"]]],[11,"sample",R[97],E,7,[[["self"],["r"]],["bool"]]],[11,"sample",R[113],E,10,[[["self"],["r"]],["usize"]]],[11,"sample",R[103],E,11,[[["self"],["r"]],["usize"]]],[11,"sample",R[97],E,12,[[["self"],["r"]]]],[11,"sample",E,E,13,[[["self"],["r"]]]],[11,"sample",E,E,14,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,15,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,16,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,17,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,18,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,43,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,19,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,20,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,44,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,21,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,22,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,23,[[["self"],["r"]],["u64"]]],[11,"sample",E,E,24,[[["self"],["r"]],["u64"]]],[11,"sample",E,E,25,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,26,[[["self"],["r"]],[["f64"],["vec",["f64"]]]]],[11,"sample",E,E,27,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,28,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,46,[[["self"],["r"]],["f32"]]],[11,"sample",E,E,41,[[["self"],["r"]],["f32"]]],[11,"sample",E,E,42,[[["self"],["r"]],["f32"]]],[11,"sample",E,E,46,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,41,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,42,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,46,[[["self"],["r"]],["u8"]]],[11,"sample",E,E,46,[[["self"],["r"]],["u16"]]],[11,"sample",E,E,46,[[["self"],["r"]],["u32"]]],[11,"sample",E,E,46,[[["self"],["r"]],["u64"]]],[11,"sample",E,E,46,[[["self"],["r"]],["u128"]]],[11,"sample",E,E,46,[[["self"],["r"]],["usize"]]],[11,"sample",E,E,46,[[["self"],["r"]],["i8"]]],[11,"sample",E,E,46,[[["self"],["r"]],["i16"]]],[11,"sample",E,E,46,[[["self"],["r"]],["i32"]]],[11,"sample",E,E,46,[[["self"],["r"]],["i64"]]],[11,"sample",E,E,46,[[["self"],["r"]],["i128"]]],[11,"sample",E,E,46,[[["self"],["r"]],["isize"]]],[11,"sample",E,E,46,[[["self"],["r"]],["nonzerou8"]]],[11,"sample",E,E,46,[[["self"],["r"]],["nonzerou16"]]],[11,"sample",E,E,46,[[["self"],["r"]],[R[34]]]],[11,"sample",E,E,46,[[["self"],["r"]],["nonzerou64"]]],[11,"sample",E,E,46,[[["self"],["r"]],["nonzerou128"]]],[11,"sample",E,E,46,[[["self"],["r"]],["nonzerousize"]]],[11,"sample",E,E,46,[[["self"],["r"]],["char"]]],[11,"sample",E,E,40,[[["self"],["r"]],["char"]]],[11,"sample",E,E,46,[[["self"],["r"]],["bool"]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]]]],[11,"sample",E,E,46,[[["self"],["r"]],["option"]]],[11,"sample",E,E,46,[[["self"],["r"]],["wrapping"]]],[11,"from",R[111],E,6,[[["range"]],[R[96]]]],[11,"from",E,E,6,[[["rangeinclusive"]],[R[96]]]],[11,"from",R[116],E,34,[[["u32"],["vec",["u32"]]],["self"]]],[11,"from",E,E,34,[[["vec",["usize"]],["usize"]],["self"]]],[11,"next",R[97],E,45,[[["self"]],["option"]]],[11,R[118],E,E,45,[[["self"]]]],[11,"next",R[116],E,55,[[["self"]],[["option",["usize"]],["usize"]]]],[11,R[118],E,E,55,[[["self"]]]],[11,"next",E,E,56,[[["self"]],["option"]]],[11,R[118],E,E,56,[[["self"]]]],[11,"next",R[107],E,54,[[["self"]],["option"]]],[11,R[118],E,E,54,[[["self"]]]],[11,"len",E,E,54,[[["self"]],["usize"]]],[11,R[23],R[106],E,32,[[],["self"]]],[11,R[23],E,E,52,[[],[R[119]]]],[11,"clone",R[111],E,6,[[["self"]],[R[96]]]],[11,"clone",E,E,47,[[["self"]],["uniformint"]]],[11,"clone",E,E,48,[[["self"]],["uniformfloat"]]],[11,"clone",E,E,49,[[["self"]],["uniformduration"]]],[11,"clone",R[97],E,7,[[["self"]],[R[98]]]],[11,"clone",E,E,2,[[["self"]],[R[99]]]],[11,"clone",R[113],E,10,[[["self"]],["self"]]],[11,"clone",R[103],E,11,[[["self"]],[R[104]]]],[11,"clone",E,E,8,[[["self"]],[R[102]]]],[11,"clone",R[97],E,12,[[["self"]],[R[120]]]],[11,"clone",E,E,13,[[["self"]],[R[121]]]],[11,"clone",E,E,14,[[["self"]],["gamma"]]],[11,"clone",E,E,15,[[["self"]],[R[122]]]],[11,"clone",E,E,16,[[["self"]],["fisherf"]]],[11,"clone",E,E,17,[[["self"]],["studentt"]]],[11,"clone",E,E,18,[[["self"]],["beta"]]],[11,"clone",E,E,43,[[["self"]],["standardnormal"]]],[11,"clone",E,E,19,[[["self"]],["normal"]]],[11,"clone",E,E,20,[[["self"]],[R[123]]]],[11,"clone",E,E,44,[[["self"]],["exp1"]]],[11,"clone",E,E,21,[[["self"]],["exp"]]],[11,"clone",E,E,22,[[["self"]],["pareto"]]],[11,"clone",E,E,23,[[["self"]],["poisson"]]],[11,"clone",E,E,24,[[["self"]],["binomial"]]],[11,"clone",E,E,25,[[["self"]],["cauchy"]]],[11,"clone",E,E,26,[[["self"]],[R[105]]]],[11,"clone",E,E,27,[[["self"]],[R[124]]]],[11,"clone",E,E,28,[[["self"]],["weibull"]]],[11,"clone",E,E,41,[[["self"]],["openclosed01"]]],[11,"clone",E,E,42,[[["self"]],["open01"]]],[11,"clone",E,E,46,[[["self"]],["standard"]]],[11,"clone",R[114],E,31,[[["self"]],["reseedingrng"]]],[11,"clone",R[115],E,33,[[["self"]],["steprng"]]],[11,"clone",R[106],E,51,[[["self"]],["stdrng"]]],[11,"clone",E,E,52,[[["self"]],[R[119]]]],[11,"clone",R[116],E,34,[[["self"]],[R[126]]]],[11,"clone",E,E,56,[[["self"]],[R[125]]]],[11,"eq",R[97],E,2,[[["self"],[R[99]]],["bool"]]],[11,"eq",R[103],E,8,[[["self"],[R[102]]],["bool"]]],[11,"eq",R[116],E,34,[[["self"],[R[126]]],["bool"]]],[11,"fmt",R[103],E,8,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[114],E,53,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[111],E,6,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,47,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,48,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,49,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[97],E,7,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,2,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[113],E,10,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[103],E,11,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,8,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[97],E,12,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,13,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,14,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,15,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,16,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,17,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,18,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,43,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,19,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,20,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,44,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,21,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,22,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,23,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,24,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,25,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,26,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,27,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,28,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,41,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,42,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,40,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,45,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,46,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[114],E,30,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,53,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,31,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[106],E,32,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[115],E,33,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[106],E,51,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,52,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[116],E,34,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,55,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,56,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[107],E,54,[[["self"],[R[33]]],[R[15]]]],[11,"description",R[103],E,8,[[["self"]],["str"]]],[11,"cause",E,E,8,[[["self"]],[["error"],["option",["error"]]]]],[11,"source",R[114],E,53,[[["self"]],[["error"],["option",["error"]]]]],[11,R[64],R[106],E,51,[[],["self"]]],[11,R[66],E,E,51,[[[R[67]]],[[R[15],["error"]],["error"]]]],[11,R[60],R[114],E,30,[[["self"]],["u32"]]],[11,R[61],E,E,30,[[["self"]],["u64"]]],[11,R[62],E,E,30,[[["self"]]]],[11,R[63],E,E,30,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[60],E,E,31,[[["self"]],["u32"]]],[11,R[61],E,E,31,[[["self"]],["u64"]]],[11,R[62],E,E,31,[[["self"]]]],[11,R[63],E,E,31,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[60],R[106],E,32,[[["self"]],["u32"]]],[11,R[61],E,E,32,[[["self"]],["u64"]]],[11,R[62],E,E,32,[[["self"]]]],[11,R[63],E,E,32,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[60],R[115],E,33,[[["self"]],["u32"]]],[11,R[61],E,E,33,[[["self"]],["u64"]]],[11,R[62],E,E,33,[[["self"]]]],[11,R[63],E,E,33,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[60],R[106],E,51,[[["self"]],["u32"]]],[11,R[61],E,E,51,[[["self"]],["u64"]]],[11,R[62],E,E,51,[[["self"]]]],[11,R[63],E,E,51,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[60],E,E,52,[[["self"]],["u32"]]],[11,R[61],E,E,52,[[["self"]],["u64"]]],[11,R[62],E,E,52,[[["self"]]]],[11,R[63],E,E,52,[[["self"]],[[R[15],["error"]],["error"]]]],[11,"new","rand",R[158],39,[[["e"]],["error"]]],[11,"inner",E,R[159],39,[[["self"]],["error"]]],[11,R[160],E,R[161],39,[[],[["box",["error"]],["error"]]]],[18,R[43],E,R[44],39,N],[18,R[45],E,R[46],39,N],[11,R[47],E,R[48],39,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"code",E,R[162],39,[[["self"]],[[R[34]],["option",[R[34]]]]]]],"p":[[8,"RngCore"],[8,R[73]],[4,R[127]],[8,R[128]],[8,R[129]],[8,R[130]],[3,"Uniform"],[3,R[131]],[4,R[132]],[8,"Weight"],[3,R[100]],[3,R[100]],[3,R[133]],[3,R[134]],[3,"Gamma"],[3,R[135]],[3,"FisherF"],[3,"StudentT"],[3,"Beta"],[3,"Normal"],[3,R[136]],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Cauchy"],[3,R[137]],[3,R[138]],[3,"Weibull"],[8,R[139]],[3,"ReadRng"],[3,R[140]],[3,R[141]],[3,"StepRng"],[4,"IndexVec"],[8,R[142]],[8,R[143]],[8,"Rng"],[8,R[144]],[3,"Error"],[3,R[145]],[3,R[146]],[3,"Open01"],[3,R[147]],[3,"Exp1"],[3,"DistIter"],[3,"Standard"],[3,R[148]],[3,R[149]],[3,R[150]],[3,"OsRng"],[3,"StdRng"],[3,R[151]],[3,R[152]],[3,R[153]],[4,R[154]],[4,R[155]]]};
searchIndex["rand_chacha"]={"doc":"The ChaCha random number generator.","i":[[3,R[89],"rand_chacha","ChaCha with 12 rounds",N,N],[3,R[87],E,R[74],N,N],[3,R[90],E,R[81],N,N],[3,R[86],E,R[74],N,N],[3,R[91],E,"ChaCha with 8 rounds",N,N],[3,R[88],E,R[74],N,N],[11,R[75],E,R[76],0,[[["self"]],["u128"]]],[11,R[77],E,R[78],0,[[["self"],["u128"]]]],[11,R[79],E,R[80],0,[[["self"],["u64"]]]],[11,R[75],E,R[76],1,[[["self"]],["u128"]]],[11,R[77],E,R[78],1,[[["self"],["u128"]]]],[11,R[79],E,R[80],1,[[["self"],["u64"]]]],[11,R[75],E,R[76],2,[[["self"]],["u128"]]],[11,R[77],E,R[78],2,[[["self"],["u128"]]]],[11,R[79],E,R[80],2,[[["self"],["u64"]]]],[6,"ChaChaRng",E,R[81],N,N],[6,"ChaChaCore",E,"ChaCha with 20 rounds, low-level interface",N,N],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[35],E,E,3,[[["self"]],[T]]],[11,R[36],E,E,3,[[["self"],[T]]]],[11,R[12],E,E,3,[[[U]],[R[15]]]],[11,R[13],E,E,3,[[],[R[15]]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[18]]]],[11,"vzip",E,E,3,[[],["v"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[["self"],[T]]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"vzip",E,E,1,[[],["v"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[35],E,E,4,[[["self"]],[T]]],[11,R[36],E,E,4,[[["self"],[T]]]],[11,R[12],E,E,4,[[[U]],[R[15]]]],[11,R[13],E,E,4,[[],[R[15]]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[18]]]],[11,"vzip",E,E,4,[[],["v"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[36],E,E,0,[[["self"],[T]]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[35],E,E,5,[[["self"]],[T]]],[11,R[36],E,E,5,[[["self"],[T]]]],[11,R[12],E,E,5,[[[U]],[R[15]]]],[11,R[13],E,E,5,[[],[R[15]]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[R[18]]]],[11,"vzip",E,E,5,[[],["v"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[["self"],[T]]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"from",E,E,0,[[[R[82]]],["self"]]],[11,"from",E,E,1,[[[R[83]]],["self"]]],[11,"from",E,E,2,[[[R[84]]],["self"]]],[11,"clone",E,E,4,[[["self"]],[R[82]]]],[11,"clone",E,E,0,[[["self"]],["chacha20rng"]]],[11,"clone",E,E,3,[[["self"]],[R[83]]]],[11,"clone",E,E,1,[[["self"]],["chacha12rng"]]],[11,"clone",E,E,5,[[["self"]],[R[84]]]],[11,"clone",E,E,2,[[["self"]],["chacha8rng"]]],[11,"fmt",E,E,4,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,0,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,3,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,1,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,5,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,2,[[["self"],[R[33]]],[R[15]]]],[11,R[85],E,E,4,[[["self"]]]],[11,R[85],E,E,3,[[["self"]]]],[11,R[85],E,E,5,[[["self"]]]],[11,R[64],E,E,4,[[],["self"]]],[11,R[64],E,E,0,[[],["self"]]],[11,R[64],E,E,3,[[],["self"]]],[11,R[64],E,E,1,[[],["self"]]],[11,R[64],E,E,5,[[],["self"]]],[11,R[64],E,E,2,[[],["self"]]],[11,R[60],E,E,0,[[["self"]],["u32"]]],[11,R[61],E,E,0,[[["self"]],["u64"]]],[11,R[62],E,E,0,[[["self"]]]],[11,R[63],E,E,0,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[60],E,E,1,[[["self"]],["u32"]]],[11,R[61],E,E,1,[[["self"]],["u64"]]],[11,R[62],E,E,1,[[["self"]]]],[11,R[63],E,E,1,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[60],E,E,2,[[["self"]],["u32"]]],[11,R[61],E,E,2,[[["self"]],["u64"]]],[11,R[62],E,E,2,[[["self"]]]],[11,R[63],E,E,2,[[["self"]],[[R[15],["error"]],["error"]]]]],"p":[[3,R[86]],[3,R[87]],[3,R[88]],[3,R[89]],[3,R[90]],[3,R[91]]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","i":[[3,"Error",R[56],R[156],N,N],[3,"OsRng",E,R[157],N,N],[11,"new",E,R[158],0,[[["e"]],["self"]]],[11,"inner",E,R[159],0,[[["self"]],["error"]]],[11,R[160],E,R[161],0,[[],[["error"],["box",["error"]]]]],[18,R[43],E,R[44],0,N],[18,R[45],E,R[46],0,N],[11,R[47],E,R[48],0,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"code",E,R[162],0,[[["self"]],[[R[34]],["option",[R[34]]]]]],[0,"block",E,"The `BlockRngCore` trait and implementation helpers",N,N],[3,R[70],R[59],R[49],N,N],[12,"core",E,R[50],1,N],[3,R[71],E,R[49],N,N],[12,"core",E,R[50],2,N],[8,R[72],E,"A trait for RNGs which do not generate random numbers…",N,N],[16,"Item",E,"Results element type, e.g. `u32`.",3,N],[16,"Results",E,"Results type. This is the 'block' an RNG implementing…",3,N],[10,R[85],E,"Generate a new block of results.",3,[[["self"]]]],[11,"new",E,R[51],1,[[["r"]],[R[68]]]],[11,"index",E,R[52],1,[[["self"]],["usize"]]],[11,"reset",E,R[53],1,[[["self"]]]],[11,R[54],E,R[55],1,[[["self"],["usize"]]]],[11,"new",E,R[51],2,[[["r"]],[R[69]]]],[11,"index",E,R[52],2,[[["self"]],["usize"]]],[11,"reset",E,R[53],2,[[["self"]]]],[11,R[54],E,R[55],2,[[["self"],["usize"]]]],[0,"impls",R[56],"Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next",E,"Implement `fill_bytes` via `next_u64` and `next_u32`,…",N,[[["r"]]]],[5,"fill_via_u32_chunks",E,R[57],N,[[]]],[5,"fill_via_u64_chunks",E,R[57],N,[[]]],[5,"next_u32_via_fill",E,"Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill",E,"Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le",R[56],"Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`.…",N,[[]]],[5,"read_u64_into",E,"Reads unsigned 64 bit integers from `src` into `dst`.…",N,[[]]],[8,"RngCore",R[56],R[163],N,N],[10,R[60],E,R[164],4,[[["self"]],["u32"]]],[10,R[61],E,R[165],4,[[["self"]],["u64"]]],[10,R[62],E,R[166],4,[[["self"]]]],[10,R[63],E,R[167],4,[[["self"]],[[R[15],["error"]],["error"]]]],[8,R[168],E,R[169],N,N],[8,R[73],E,R[170],N,N],[16,"Seed",E,R[171],5,N],[10,R[64],E,R[172],5,[[],["self"]]],[11,R[65],E,R[173],5,[[["u64"]],["self"]]],[11,R[66],E,R[174],5,[[[R[67]]],[["error"],[R[15],["error"]]]]],[11,R[175],E,R[176],5,[[],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[58],E,E,0,[[["self"]],["string"]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[35],E,E,6,[[["self"]],[T]]],[11,R[36],E,E,6,[[["self"],[T]]]],[11,R[12],E,E,6,[[[U]],[R[15]]]],[11,R[13],E,E,6,[[],[R[15]]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[18]]]],[11,"from",R[59],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[["self"],[T]]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[["self"],[T]]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,R[60],E,E,1,[[["self"]],["u32"]]],[11,R[61],E,E,1,[[["self"]],["u64"]]],[11,R[62],E,E,1,[[["self"]]]],[11,R[63],E,E,1,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[60],E,E,2,[[["self"]],["u32"]]],[11,R[61],E,E,2,[[["self"]],["u64"]]],[11,R[62],E,E,2,[[["self"]]]],[11,R[63],E,E,2,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[60],R[56],E,6,[[["self"]],["u32"]]],[11,R[61],E,E,6,[[["self"]],["u64"]]],[11,R[62],E,E,6,[[["self"]]]],[11,R[63],E,E,6,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[64],R[59],E,1,[[],["self"]]],[11,R[65],E,E,1,[[["u64"]],["self"]]],[11,R[66],E,E,1,[[[R[67]]],[["error"],[R[15],["error"]]]]],[11,R[64],E,E,2,[[],["self"]]],[11,R[65],E,E,2,[[["u64"]],["self"]]],[11,R[66],E,E,2,[[[R[67]]],[["error"],[R[15],["error"]]]]],[11,"from",R[56],E,0,[[[R[34]]],["self"]]],[11,"from",E,E,0,[[["error"]],["self"]]],[11,R[23],E,E,6,[[],["osrng"]]],[11,"clone",R[59],E,1,[[["self"]],[R[68]]]],[11,"clone",E,E,2,[[["self"]],[R[69]]]],[11,"clone",R[56],E,6,[[["self"]],["osrng"]]],[11,"fmt",E,E,0,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,0,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[59],E,1,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",E,E,2,[[["self"],[R[33]]],[R[15]]]],[11,"fmt",R[56],E,6,[[["self"],[R[33]]],[R[15]]]],[11,"source",E,E,0,[[["self"]],[["error"],["option",["error"]]]]],[11,"read",E,E,4,[[["self"]],[["error"],[R[15],["usize","error"]],["usize"]]]]],"p":[[3,"Error"],[3,R[70]],[3,R[71]],[8,R[72]],[8,"RngCore"],[8,R[73]],[3,"OsRng"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);